// ============================================================
// DBML Schema for "Alabuga: Cosmic Ascent" Gamification Platform
// Project: Hackathon MVP
// Target Interface (Users): Telegram Mini App
// Target Interface (Admins): Web Application
// ============================================================

// Enum for the status of a mission completion that requires moderation
Enum "mission_completion_status" {
  PENDING_REVIEW
  APPROVED
  REJECTED
}

// Enum for the rarity of an artifact
Enum "artifact_rarity" {
  COMMON
  RARE
  EPIC
  LEGENDARY
}

// Enum for manager roles (HR, Organizer, etc.)
Enum "manager_role" {
  HR
  ORGANIZER
  ADMIN
}

// Enum for the status of an order in the store
Enum "order_status" {
  PENDING
  FULFILLED
  CANCELLED
}
// ENUM for different mission types, defining their completion logic
Enum "mission_type" {
  MANUAL_URL // Mission completed by submitting a URL, potentially requiring moderation
  QUIZ // Mission completed by passing a quiz
  QR_CODE // Mission completed by scanning a specific QR code
  AI_CHECK // Mission completed by AI evaluation of user submission
}

// Enum for the status of a campaign
Enum "campaign_status" {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}


// -------------------------------------------------------------
// --- Core Entities: Users (Players) & Managers (Admins)    ---
// -------------------------------------------------------------

// Users (candidates/employees) interacting via Telegram Mini App
Table "users" {
  "id" uuid [pk, not null, default: `gen_random_uuid()`, note: 'Primary key, UUID.']
  "tg_id" bigint [unique, not null, note: 'Telegram user ID, the main identifier.']
  "username" varchar(255) [null, note: 'Telegram username (@handle).']
  "first_name" varchar(255) [not null, note: 'Users first name from Telegram.']
  "last_name" varchar(255) [null, note: 'Users last name from Telegram.']
  "avatar_url" text [null, note: 'URL to the user profile picture.']

  // --- Game-related Fields ---
  "rank_id" uuid [ref: > ranks.id, null, note: 'Current rank of the user.']
  "experience_points" integer [not null, default: 0, note: 'Experience points (Опыт) for ranking up.']
  "mana_points" integer [not null, default: 0, note: 'Currency (Мана) to spend in the store.']

  // --- Timestamps ---
  "created_at" timestamp [not null, default: `now()`, note: 'Timestamp of user creation.']
  "updated_at" timestamp [not null, default: `now()`, note: 'Timestamp of last update.']
  "deleted_at" timestamp [null, note: 'Timestamp for soft deletion.']
}

// Managers (HR, Organizers) interacting via a separate Web App
Table "managers" {
  "id" uuid [pk, not null, default: `gen_random_uuid()`]
  "email" varchar(255) [unique, not null, note: 'Login email for the admin panel.']
  "full_name" varchar(255) [not null]
  "password" bytea [not null, note: 'Hashed password stored as byte array.']
  "password_salt" bytea [not null, note: 'Salt for password hashing.']
  "role" manager_role [not null, note: 'Defines permissions (HR, Organizer, Admin).']

  // --- Timestamps ---
  "created_at" timestamp [not null, default: `now()`]
  "updated_at" timestamp [not null, default: `now()`]
  "deleted_at" timestamp [null]
}


// -------------------------------------------------------------
// --- Game Logic Entities                                   ---
// -------------------------------------------------------------

// Game ranks and the conditions to achieve them
Table "ranks" {
  "id" uuid [pk, not null, default: `gen_random_uuid()`]
  "title" varchar(255) [unique, not null, note: 'Display name of the Title/Specialization, e.g., "Пилот-испытатель", "Ветеран двух сезонов"']
  "description" text [null, note: 'Detailed description of what this title represents and how it is earned']
  "image_url" text [null, note: 'URL to the title badge/icon image displayed in the user interface']
  "priority" integer [not null, default: 0, note: 'Priority level for display. If a user qualifies for multiple titles, the one with the highest priority is shown.']
  "unlock_conditions" jsonb [not null, note: 'JSON object describing the conditions to earn this title. Example: {"required_achievements": {"operator": "AND", "ids": ["ach_uuid_1", "ach_uuid_2"]}, "required_competencies": [{"id": "comp_uuid_1", "level": 3}]}']
  
  // --- Timestamps ---
  "created_at" timestamp [not null, default: `now()`]
  "updated_at" timestamp [not null, default: `now()`]
  "deleted_at" timestamp [null]

  note: 'Stores dynamic Titles/Specializations that users can earn. The user is assigned the title with the highest priority for which they meet the conditions.'
}

// Skills/competencies that users can develop
Table "competencies" {
  "id" uuid [pk, not null, default: `gen_random_uuid()`]
  "name" varchar(255) [not null, note: 'Name of the competency, e.g., "Общение", "Аналитика".']
  "description" text [null]
  "campaign_id" uuid [ref: > campaigns.id, null, note: 'NULL for global competencies, campaign ID for campaign-specific competencies.']
  "is_global" boolean [not null, default: true, note: 'True for global competencies available across all campaigns, false for campaign-specific competencies.']

  // --- Timestamps ---
  "created_at" timestamp [not null, default: `now()`]
  "updated_at" timestamp [not null, default: `now()`]
  "deleted_at" timestamp [null]

  Indexes {
    (name) [unique, where: "is_global = true AND deleted_at IS NULL"]
    (campaign_id, name) [unique, where: "is_global = false AND campaign_id IS NOT NULL AND deleted_at IS NULL"]
    campaign_id
    is_global
  }
}

// Join table to track each user's progress in each competency
Table "user_competencies" {
  "user_id" uuid [ref: > users.id, not null]
  "competency_id" uuid [ref: > competencies.id, not null]
  "level" integer [not null, default: 0, note: 'The current level of the competency for the user.']
  "progress_points" integer [not null, default: 0, note: 'Points accumulated towards the next level.']
  
  Indexes {
    (user_id, competency_id) [pk]
  }
}

// Campaigns for event-driven, invite-only mission funnels
Table "campaigns" {
  "id" uuid [pk, not null, default: `gen_random_uuid()`, note: 'Primary key for the campaign.']
  "title" varchar(255) [not null, note: 'Display name of the campaign visible to admins and users.']
  "description" text [null, note: 'Detailed description of the campaign purpose and goals.']
  "activation_code" varchar(50) [unique, not null, note: 'Unique code that users enter to join this campaign. Serves as entry point.']
  "status" campaign_status [not null, default: 'DRAFT', note: 'Current status of the campaign lifecycle.']
  "start_date" timestamp [null, note: 'When the campaign becomes active and users can join.']
  "end_date" timestamp [null, note: 'When the campaign closes and no new participants can join.']
  "max_participants" integer [null, note: 'Maximum number of users who can join this campaign. NULL for unlimited.']
  "created_by" uuid [ref: > managers.id, not null, note: 'The manager who created this campaign.']
  "metadata" jsonb [null, note: 'Additional campaign-specific settings and configuration data.']
  "qr_url" text [null, note: 'Img URL for QR code']
  "cover_url" text [null, note: 'Img URL for campaign cover']
  "icon_url" text [null, note: 'URL to the campaign icon/logo image for visual identification']
  "created_at" timestamp [not null, default: `now()`, note: 'Timestamp when the campaign was created.']
  "updated_at" timestamp [not null, default: `now()`]
  "deleted_at" timestamp [null, note: 'Timestamp for soft deletion of campaigns.']

  Indexes {
    activation_code
    status
    (start_date, end_date)
    created_by
  }
}

// Join table for users participating in campaigns
Table "user_campaigns" {
  "user_id" uuid [ref: > users.id, not null, note: 'The user who joined the campaign.']
  "campaign_id" uuid [ref: > campaigns.id, not null, note: 'The campaign the user has joined.']
  "joined_at" timestamp [not null, default: `now()`, note: 'When the user joined this campaign.']
  "is_active" boolean [not null, default: true, note: 'Whether the user is still active in this campaign.']
  "join_metadata" jsonb [null, note: 'Additional data captured when user joined (referral source, etc.).']

  Indexes {
    (user_id, campaign_id) [pk, name: 'pk_user_campaigns']
    campaign_id
    joined_at
    (campaign_id, is_active)
  }
}

// Templates for campaigns
Table "campaign_templates" {
  "id" uuid [pk, not null, default: `gen_random_uuid()`, note: 'Primary key for the campaign template.']
  "name" varchar(255) [not null, note: 'Name of the template for admin identification.']
  "description" text [null, note: 'Description of what this template is designed for.']
  "template_data" jsonb [not null, note: 'JSON structure containing the campaign configuration and mission definitions.']
  "created_by" uuid [ref: > managers.id, not null, note: 'The manager who created this template.']
  "is_public" boolean [not null, default: false, note: 'Whether this template can be used by other managers.']
  "created_at" timestamp [not null, default: `now()`, note: 'When the template was created.']
  "updated_at" timestamp [not null, default: `now()`]
  "deleted_at" timestamp [null, note: 'Timestamp for soft deletion of templates.']

  Indexes {
    created_by
    is_public
  }
}

// Missions (tasks) available to users
Table "missions" {
  "id" uuid [pk, not null, default: `gen_random_uuid()`]
  "campaign_id" uuid [ref: > campaigns.id, not null, note: 'The campaign this mission belongs to. Every mission must be part of a campaign.']
  "title" varchar(255) [not null]
  "description" text [null]
  "category" varchar(100) [not null, note: 'Category for mission branching, e.g., "Квесты", "Рекрутинг".']
  "required_rank_id" uuid [ref: > ranks.id, null, note: '[DEPRECATED] Access is now controlled by required_achievement_id. This field is kept for potential future use or legacy data but is not actively used for locking missions.']
  "required_achievement_id" uuid [ref: > achievements.id, null, note: 'Optional achievement that must be earned before this mission becomes available. Must be from the same campaign.']
  
  // --- Rewards & Effects ---
  "experience_reward" integer [not null, default: 0]
  "mana_reward" integer [not null, default: 0]
  "competency_rewards" jsonb [null, note: 'JSON array of competency points awarded. E.g., [{"competency_id": "uuid", "points": 50}]']
  "awarded_artifact_id" uuid [ref: > artifacts.id, null, note: 'An optional artifact awarded upon completion.']

  // --- Logic ---
  "type" mission_type [not null, note: 'Defines the completion logic for the mission (e.g., QUIZ, MANUAL_URL).']
  "completion_code" varchar(50) [unique, null, note: 'Unique code for QR type missions.']
  "qr_url" text [null, note: 'Img URL for code in QR type missions.']
  "cover_url" text [null, note: 'URL to the mission cover image displayed in the user interface.']
  "created_by" uuid [ref: > managers.id, not null, note: 'The manager who created this mission.']
  
  // --- Timestamps ---
  "created_at" timestamp [not null, default: `now()`]
  "updated_at" timestamp [not null, default: `now()`]
  "deleted_at" timestamp [null]

  Indexes {
    campaign_id
  }
}

// Dedicated table for Quiz mission details.
Table "mission_quiz_details" {
  "mission_id" uuid [pk, ref: > missions.id, not null, note: 'Foreign key linking to the specific mission.']
  "questions" jsonb [not null, note: 'JSON array defining the quiz questions, answers, and correct answer IDs.']
  "pass_threshold" float [not null, default: 1.0, note: 'Fraction of correct answers required to pass the quiz (e.g., 0.8 for 80%).']
}

// Dedicated table for Manual URL submission mission details.
Table "mission_manual_details" {
  "mission_id" uuid [pk, ref: > missions.id, not null, note: 'Foreign key linking to the specific mission.']
  "submission_prompt" text [not null, note: 'The specific instructions or prompt displayed to the user for the submission.']
  "placeholder_text" varchar(255) [null, note: 'Placeholder text for the URL input field (e.g., "https://github.com/...").']
}

// Dedicated table for AI mission check details.
Table "mission_ai_check_details" {
  "mission_id" uuid [pk, ref: > missions.id, not null, note: 'Foreign key linking to the specific mission']
  "prompt_template" text [not null, note: 'AI prompt template for evaluating user submission']
  "evaluation_criteria" jsonb [not null, note: 'JSON object defining specific criteria for AI evaluation']
  "confidence_threshold" float [not null, default: 0.8, note: 'Minimum confidence score required for automatic approval (0-1)']
  "user_instruction" text [not null, note: 'Instructions shown to users for this AI-checked mission']
}

// Log of users completing missions
Table "mission_completions" {
  "id" uuid [pk, not null, default: `gen_random_uuid()`]
  "user_id" uuid [ref: > users.id, not null]
  "mission_id" uuid [ref: > missions.id, not null]
  "status" mission_completion_status [not null, default: 'APPROVED', note: 'Status, esp. for moderated missions.']
  "result_data" text [null, note: 'Data submitted by the user (e.g., text, URL to a file).']
  "moderator_id" uuid [ref: > managers.id, null, note: 'The manager who reviewed this completion.']
  "moderator_comment" text [null, note: 'Feedback from the moderator on rejection.']
  
  // --- Timestamps ---
  "created_at" timestamp [not null, default: `now()`, note: 'Timestamp of when the user submitted the completion.']
  "updated_at" timestamp [not null, default: `now()`, note: 'Timestamp of the last status change.']
}


// --- Collectibles: Artifacts & Store -----------------------

// Unique collectible badges/rewards
Table "artifacts" {
  "id" uuid [pk, not null, default: `gen_random_uuid()`]
  "name" varchar(255) [unique, not null]
  "description" text [not null]
  "image_url" text [not null]
  "rarity" artifact_rarity [not null, default: 'COMMON']
  
  // --- Timestamps ---
  "created_at" timestamp [not null, default: `now()`]
  "updated_at" timestamp [not null, default: `now()`]
  "deleted_at" timestamp [null]
}

// Join table for artifacts earned by users
Table "user_artifacts" {
  "user_id" uuid [ref: > users.id, not null]
  "artifact_id" uuid [ref: > artifacts.id, not null]
  "awarded_at" timestamp [not null, default: `now()`]
  
  Indexes {
    (user_id, artifact_id) [pk, note: 'Assuming a user can only have one of each artifact.']
  }
}

// Achievements that users can earn by meeting specific conditions
Table "achievements" {
  "id" uuid [pk, not null, default: `gen_random_uuid()`]
  "campaign_id" uuid [ref: > campaigns.id, not null, note: 'Campaign this achievement belongs to']
  "name" varchar(255) [not null, note: 'Display name of the achievement (e.g., "Marketer", "Top Recruiter")']
  "description" text [null, note: 'Detailed description of the achievement']
  "image_url" text [null, note: 'URL to the achievement badge image']
  
  // --- Unlock Logic ---
  "unlock_conditions" jsonb [not null, default: '{}', note: 'JSON object with conditions to earn this achievement. E.g., {"required_missions": ["uuid1", "uuid2"] }']
  
  // --- Achievement Rewards ---
  "experience_reward" integer [not null, default: 0, note: 'Experience points awarded when this achievement is earned.']
  "mana_reward" integer [not null, default: 0, note: 'Mana points awarded when this achievement is earned.']
  "awarded_artifact_id" uuid [ref: > artifacts.id, null, note: 'An optional artifact awarded when this achievement is earned.']

  "created_at" timestamp [not null, default: `now()`, note: 'When the achievement was created']

  Indexes {
    campaign_id
    (campaign_id, name)
  }
}

// Join table for achievements earned by users
Table "user_achievements" {
  "user_id" uuid [ref: > users.id, not null, note: 'User who earned the achievement']
  "achievement_id" uuid [ref: > achievements.id, not null, note: 'Achievement that was earned']
  "awarded_at" timestamp [not null, default: `now()`, note: 'When the achievement was awarded to the user']

  Indexes {
    (user_id, achievement_id) [pk, name: 'pk_user_achievements']
    user_id
    achievement_id
    awarded_at
  }
}

// Items available for purchase in the store (Хранилище)
Table "store_items" {
  "id" uuid [pk, not null, default: `gen_random_uuid()`]
  "name" varchar(255) [not null]
  "description" text
  "image_url" text
  "cost" integer [not null, note: 'Price in mana_points.']
  "quantity" integer [null, note: 'Available stock. NULL for infinite items (e.g., digital goods).']
  "is_active" boolean [not null, default: true, note: 'Toggles visibility in the store.']
  "campaign_id" uuid [ref: > campaigns.id, null, note: 'Campaign this store item belongs to. NULL for global items']
  "is_global" boolean [not null, default: false, note: 'Whether this item is available across all campaigns']
  
  // --- Timestamps ---
  "created_at" timestamp [not null, default: `now()`]
  "updated_at" timestamp [not null, default: `now()`]
  "deleted_at" timestamp [null]

  Indexes {
    campaign_id
    is_global
    (campaign_id, is_active)
  }
}

// Log of user purchases from the store
Table "orders" {
  "id" uuid [pk, not null, default: `gen_random_uuid()`]
  "user_id" uuid [ref: > users.id, not null]
  "item_id" uuid [ref: > store_items.id, not null]
  "points_spent" integer [not null, note: 'Price at the time of purchase.']
  "status" order_status [not null, default: 'PENDING']
  
  // --- Timestamps ---
  "created_at" timestamp [not null, default: `now()`]
  "updated_at" timestamp [not null, default: `now()`]
}

// Represents a unique, scannable QR code for offline events.
Table "qr_triggers" {
  "id" uuid [pk, not null, default: `gen_random_uuid()`]
  "name" varchar(255) [not null, note: 'Admin-facing name for the trigger, e.g., "Forum Day 1 - Main Stage Check-in".']
  "mission_id" uuid [ref: > missions.id, not null, note: 'The mission that gets completed when this trigger is activated.']
  "campaign_id" uuid [ref: > campaigns.id, null, note: 'Optional campaign association for QR codes that auto-join users to campaigns.']
  "is_active" boolean [not null, default: true, note: 'Allows admins to enable/disable a QR code without deleting it.']
  
  // --- Timestamps ---
  "created_at" timestamp [not null, default: `now()`]
  "updated_at" timestamp [not null, default: `now()`]
  "deleted_at" timestamp [null]

  Indexes {
    campaign_id
  }
}
